*jasegment.jax*   日本語文章でのWORD移動(W,E,B)を文節単位にするスクリプト

			  jasegment.vim説明書

文節単位移動プラグイン			*jasegment*

1. 概要					|jasegment-overview|
2. オプション				|jasegment-option|
3. 関数					|jasegment-function|
4. コマンド				|jasegment-command|
5. 問題点				|jasegment-problem|

==============================================================================
1. 概要						*jasegment-overview*

jasegment.vimは、日本語文章でのWORD移動(W,E,B)を文節単位にするスクリプトです。

W,E,B,aW,iWを置き換えます。

* 通常移動(countも対応)の他に、Visual modeや、
  dW/c2E/yB等のOperator-pending modeも対応。
* text-objectsでWORD選択を行うaW/iWも文節で選択するようにします。
* カーソル行の文節開始位置に下線を表示するオプションあり。

==============================================================================
2. オプション					*jasegment-option*

'g:jasegment#model'				*'g:jasegment#model'*
  文節区切り方法。(autoload/jasegment/にあるファイル名から.vimを除いたもの)
  設定可能な値は以下。
  'cabocha': CaboChaを使って文節区切りを実行。要CaboCha、MeCab。
             vimprocが利用可能な場合は、vimproc#popen2()を使って1回cabochaを
             起動して使い続けます。そうでなければ、行移動後最初の'W'等の操作の
             たびにcabochaを起動・終了します。
  'mecab': MeCabを使って単語区切りを実行。要MeCab。vimprocに関しては同上。
  'knbc_bunsetu': KNBコーパスから文節区切りを学習させたデータ。
  'wpci_bunsetu': Wikipediaデータの一部をCaboChaで文節区切りしたものを学習
                  させたデータ。knbc_bunsetuよりも少し細かい区切りになる傾向。
  'jeita': TinySegmenterMakerに含まれる単語区切りデータ。
  'rwcp': TinySegmenterに含まれる単語区切りデータ。
  'endhira': ひらがなを終端とする文字列として分割。
  'endhira_mbb': 'endhira'の分割に加え、ASCII文字との境界でも分割。
  'nvi_m17n': nvi-m17nと同様の区切り。
  'jvim3': jvim3と同様の区切り。
  'mbboundary': ASCII文字とマルチバイト文字の境界で区切る。
  'kutoten': 句読点を終端とする文字列として分割。
  'nonblank': 英文のWORDと同様に、空白文字(全角空白含む)で区切る。

  省略値: 'knbc_bunsetu'
  設定例(ひらがなを終端とする文字列として分割する場合(TinySegmenter不使用)):
    let g:jasegment#model = 'endhira'

'g:jasegment#model_word'			*'g:jasegment#model_word'*
  |jasegment#cword()|で単語を取得する際の方法。
  設定可能な値は|'g:jasegment#model'|と同じ。
  省略値: 'jeita'

'g:jasegment#highlight'				*'g:jasegment#highlight'*
  カーソル行の文節開始位置に下線を表示する場合は1以上に設定します。
  カーソル行でのW,E,B,aW,iW初回使用時の文節区切りのタイミングで更新するので、
  行編集後、再度文節区切りをするまで、ずれた位置に表示されます。
  2以上に設定すると、|InsertLeave|時にも更新します。
  この場合でも、xやd等で変更すると、表示位置がずれます。
  表示を消したい場合は、空行でWを打ってください。
  省略値: 0
  設定例:
    let g:jasegment#highlight = 2

'g:jasegment#splitpat'				*'g:jasegment#splitpat'*
  強制的に文節区切りを入れる文字(パターン)の指定。|split()|の引数として使用。
  この文字(パターン)の後に強制的に文節区切りを入れます。
  省略値: '[^[:space:]　][?!、。]\+\zs'
  設定例(全角の？！の後で文節区切りを入れたい場合):
    let g:jasegment#splitpat = '[^[:space:]　][?!、。？！]\+\zs'
  注:
    区切りモデルによっては、独自の区切りパターンを持つもの(kutoten)があり、
    その場合はg:jasegment#splitpatは使用されません。
    変更したい場合は、各モデルの区切りパターン(g:jasegment#kutoten#splitpat)
    を設定してください。

'g:jasegment#endhira#splitpat0'  	*'g:jasegment#endhira#splitpat0'*
  区切りモデルとして、endhira.vim使用時に、
  ひらがなで終端される文字列として分割するための区切りパターン。
  省略値: '[ぁ-ん、。?!]\+\zs'

'g:jasegment#endhira_mbb#splitpat0'  	*'g:jasegment#endhira_mbb#splitpat0'*
  区切りモデルとして、endhira_mbb.vim使用時に、
  ひらがなで終端される文字列として分割もしくは、ASCII文字との境界で分割する
  ための区切りパターン。
  省略値: '[ぁ-ん、。?!]\+\zs\|[\x01-\x7f]\zs[^\x01-\x7f]\@=\|[^\x01-\x7f]\zs[\x01-\x7f]\@='

'g:jasegment#kutoten#splitpat'  	*'g:jasegment#kutoten#splitpat'*
  区切りモデルとして、kutoten.vim使用時に、
  句読点で終端される文字列として分割するための区切りパターン。
  省略値: '[、。]\+\zs'

'g:jasegment#cabocha#cmd'  	*'g:jasegment#cabocha#cmd'*
  CaboChaのPATH。PATHの途中にスペースを含む場合は、以下の設定例のように
  PATH全体を""でくくってください。
  省略値: 'cabocha'
  設定例:
    let g:jasegment#cabocha#cmd = '"C:/Program Files/CaboCha/bin/cabocha.exe"'

'g:jasegment#cabocha#args'      *'g:jasegment#cabocha#args'
  CaboChaの引数。
  省略値: '-I0 -O2 -f1'

'g:jasegment#cabocha#enc'       *'g:jasegment#cabocha#enc'*
  CaboChaの入出力エンコーディング。想定される値: 'utf-8', 'cp932', 'euc-jp'。
  cabocha.vimは、Vimの|iconv()|を使って、Vim側の&encodingと、CaboChaとの
  入出力データ間の変換を行います。
    Vim(&encoding) <---> cabocha.vim <--'g:jasegment#cabocha#enc'--> CaboCha
  なお、CaboCha側の設定と合っていない場合、'W'等を押しても全く移動しなくなる
  場合があります。
  省略値: &encoding
  設定例1(Vimの&encodingが'cp932'や'euc-jp'で、CaboCha側がUTF-8の場合):
    let g:jasegment#cabocha#enc = 'utf-8'
  設定例2(Vimの&encodingが'utf-8'で、CaboCha側がSHIFT-JISの場合):
    let g:jasegment#cabocha#enc = 'cp932'

'g:jasegment#mecab#cmd'  	*'g:jasegment#mecab#cmd'*
  MeCabのPATH。PATHの途中にスペースを含む場合は、以下の設定例のように
  PATH全体を""でくくってください。
  省略値: 'mecab'
  設定例:
    let g:jasegment#mecab#cmd = '"C:/Program Files/MeCab/bin/mecab.exe"'

'g:jasegment#mecab#args'      *'g:jasegment#mecab#args'
  MeCabの引数。
  省略値: '-Owakati'

'g:jasegment#mecab#enc'       *'g:jasegment#mecab#enc'*
  MeCabの入出力エンコーディング。|'g:jasegment#mecab#enc'|と同様。
  省略値: &encoding

'g:jasegment#splitsep'				*'g:jasegment#splitsep'*
  |:JaSegmentSplit|で分かち書きする際の区切り文字列
  省略値: ' '

'loaded_jasegment'				*'loaded_jasegment'*
  このプラグインを読み込みたくない場合に次のように設定します。
    let g:loaded_jasegment = 1

==============================================================================
3. 関数						*jasegment-function*

jasegment#define()				*jasegment#define()*
  jasegment#model以外の方法を使った区切りに対して、
  移動とtext-object選択用mapを登録します。
  W,E,B,aW,iWはjasegment#modelを使った区切りによる移動・選択として使いつつ、
  別の区切りによる移動・選択も行えるようにしたい場合向けです。
  例えば、jasegment#modelがデフォルトの'knbc_bunsetu'で、
  それより少し大きな区切りになる'endhira'での移動・選択も行いたい場合、
  以下の設定をすると、gw,ge,gb,ie,aeのmapを登録可能です。 >
    call jasegment#define('endhira', {
      \ 'move-n': 'gw',
      \ 'move-p': 'gb',
      \ 'move-N': 'ge',
      \ 'select-i': 'ie',
      \ 'select-a': 'ae',
    \ })
<
  (注: この設定例では、組み込みのgw,geを上書きしています)

jasegment#cword()				*jasegment#cword()*
  カーソル位置のword(単語)文字列を取得します。
  |'g:jasegment#model_word'|を使ってsegmentを区切ります。

jasegment#cWORD()				*jasegment#cWORD()*
  カーソル位置のWORD(文節)文字列を取得します。
  |'g:jasegment#model'|を使ってsegmentを区切ります。

==============================================================================
4. コマンド					*jasegment-command*

:[range]JaSegmentSplit				*:JaSegmentSplit* 
  指定行を、文節で分かち書きした内容に置換する。
  (なお、連続する複数個のタブやスペースは全て1つのスペースに置換。
  主に文節区切り再学習用データ作成用)
  文節の間に入れる文字(デフォルトはスペース)は、
  |'g:jasegment#splitsep'|で設定可能です。

==============================================================================
5. 問題点					*jasegment-problem*

* 文節区切りが適切でない場合があります。

  例えば、現状同梱しているTinySegmenter用文節区切りデータでは、
  「AもしくはB」という文字列があると、「も」の後で切られてしまいます。

  普段使う文章で文節区切りを学習し直せば改善される可能性はあります。
  (CaboChaやKNPやJ.DepPで文節区切りして、TinySegmenterMakerで学習)

* カーソル行の文節開始位置の下線表示が、編集後にずれます。
  編集前の位置に表示されたままのため。再度文節区切りをすれば更新されます。

* カーソル行でW,E,Bが使用されると、その行全体に対して文節区切りを行うため、
  1行が非常に長いと少し時間がかかります。

==============================================================================
 vim:set ft=help:

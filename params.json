{"name":"Jasegment.vim","tagline":"plugin to change WORD motion(E,W,B) for Japanese text using TinySegmenter","body":"jasegment.vim - W,E,BでのWORD移動を日本語の文節単位にするスクリプト\r\n===================================================================\r\n\r\n概要\r\n====\r\n\r\njasegment.vimは、\r\n日本語文字列上でのWORD移動(W,E,B)を文節単位にするスクリプトです。\r\nTinySegmenterを使って文節を区切っています。\r\n\r\nVimでは、日本語に関しては、word移動(w,e,b)とWORD移動(W,E,B)で違いがないため、\r\nW,E,Bの存在意味がなく、使い道がありませんでした。\r\nそこで、W,E,BでのWORD移動をword移動よりも大きくし、\r\nかつ文の構造に基づいた文節単位で移動するjasegment.vimを作りました\r\n(といっても、文節区切りはTinySegmenterを使っているだけです)。\r\n\r\n以下の特徴があります。\r\n* ひらがなが連続する中から、ひらがなで始まる文節を認識可能。\r\n  (文字種だけを見て、\r\n  漢字の後の連続するひらがなをWORDとみなす方法では不可能)\r\n* 英字とその後に連続するひらがなを、WORDとして扱う。\r\n\r\n機能:\r\n* 通常移動(countも対応)の他に、Visual modeや、\r\n  dW/c2E/yB等のOperator-pending modeも対応。\r\n* text-objectsでWORD選択を行うaW/iWも、文節で選択するようにします。\r\n* カーソル行の文節開始位置に下線を表示するオプションあり。\r\n\r\n![下線表示スクリーンショット](http://deton.github.com/jasegment.vim/jasegment.png)\r\n\r\n文節区切りに関しては、以下を使っています。\r\n* 文節区切りは、\r\n  [TinySegmenter](http://chasen.org/~taku/software/TinySegmenter/)\r\n  をVimスクリプトに移植したものを使用。\r\n* 文節区切りの学習データは、\r\n  [TinySegmenterMaker](http://shogo82148.github.com/blog/2012/11/23/tinysegmentermaker/)\r\n  を使って、\r\n  [KNBコーパス](http://nlp.ist.i.kyoto-u.ac.jp/kuntt/#ga739fe2)\r\n  から、文節区切りを学習させたもの。\r\n\r\n区切り例\r\n--------\r\n\r\nTinySegmenterの文節区切り(knbc_bunsetuモデル):\r\n\r\n    Vimは | 最も | たくさんの | コンピュータ/OSで | 利用できる | テキストエディタです。\r\n\r\nTinySegmenterの単語区切り(rwcpモデル):\r\n\r\n    Vim | は | 最も | たく | さん | の | コンピュータ | / | OS | で | 利用 | できる | テキストエディタ | です | 。\r\n\r\nVimのword:\r\n\r\n    Vim | は | 最 | もたくさんの | コンピュータ | / | OS | で | 利用 | できる | テキストエディタ | です | 。\r\n\r\nVimのWORD:\r\n\r\n    Vim | は | 最 | もたくさんの | コンピュータ | / OS | で | 利用 | できる | テキストエディタ | です | 。\r\n\r\nmatchit2.vim:\r\n\r\n    Vim | は | 最もたくさんの | コンピュータ | / | OS | で | 利用できる | テキストエディタ | です。\r\n\r\nMyMoveWord.vim(\"。\"までまるごと1つ):\r\n\r\n    Vimは最もたくさんのコンピュータ/OSで利用できるテキストエディタです。\r\n\r\nmotion_ja.vim:\r\n\r\n    Vim | は最もたくさんのコンピュータ | /OS | で利用できるテキストエディタです。\r\n\r\njvim3のWORD:\r\n\r\n    Vim | は最もたくさんのコンピュータ | /OS | で利用できるテキストエディタです | 。\r\n\r\nEmacsのM-f(forward-word):\r\n\r\n    Vim | は | 最もたくさんの | コンピュータ | /OS | で | 利用できる | テキストエディタです | 。\r\n\r\n関連\r\n====\r\n\r\n* [matchit2.vim](http://www.fenix.ne.jp/~G-HAL/soft/nosettle/#vim)\r\n\r\n    「漢字とその後の連続するひらがな」をひとまとまりとして移動。\r\n\r\n* [MyMoveWord.vim](https://sites.google.com/site/fudist/Home/mylib#TOC-w-b-W-E-B-)\r\n\r\n    指定した日本語セパレータ(。、など)でW,B,Eのカーソル移動を一旦停止。\r\n\r\n* [motion_ja.vim](https://github.com/deton/motion_ja.vim)\r\n\r\n    E,W,Bでの移動量を、e,w,bよりも大きくするためのスクリプト。\r\n    jvim3と同様に「。、」や英数字との境目まで移動。\r\n\r\n制限事項\r\n========\r\n\r\n* 文節区切りが適切でない場合があります。\r\n\r\n    例えば、現状同梱している文節区切りデータでは、\r\n    「AもしくはB」という文字列があると、「も」の後で切られてしまいます。\r\n\r\n    普段使う文章で文節区切りを学習し直せば改善される可能性はあります。\r\n    (CaboChaやKNPやJ.DepPで文節区切りして、TinySegmenterMakerで学習)\r\n\r\n* (ひらがなが連続する場合、文節区切りがぱっと見でわからないことがあるので、\r\n  文節開始位置に下線を表示するオプションを付けましたが、\r\n  ぱっと見での区切りのわかりやすさを考えると、\r\n  漢字の連続+ひらがなの連続をWORDとみなす方が使いやすいのかも)\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}